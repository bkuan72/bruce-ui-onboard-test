{"version":3,"sources":["scripts/common/utils/MenuDataGenerator.ts"],"names":[],"mappings":"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","file":"MenuDataGenerator.js","sourcesContent":["// generate menudata according to \n// the dataSchema,UI schema and data provided\n\n// dataSchema: data schema\n// uiSchema: ui schema\n// data: data\n// return: menu data\nimport { IEntityTypeAttribute,BruceInfo} from \"bruce-maps-widget\";\nexport interface MenuDataSchema {\n    type: string;\n    defaultValue:any;\n    dataSchema:IEntityTypeAttribute;\n}\ninterface UISchema {\n    [key: string]: any ;\n    type: string;\n    key: string;\n    options?: Array<string>;\n}\ninterface DataSchema extends IEntityTypeAttribute { \n    parent?: DataSchema;\n}\nexport function generateMenuData(dataSchema: IEntityTypeAttribute, uiSchema: UISchema[], data: BruceInfo): MenuDataSchema[] {\n    console.log('recieved dataSchema', dataSchema);\n    console.log('recieved uiSchema', uiSchema);\n    console.log('recieved data', data);\n    // traverse the nested dataSchema object  to key-value pairs\n    const dataSchemaMap = new Map<string, DataSchema>();\n    const traverseDataSchema = (dataSchema: DataSchema,parent:DataSchema) => {\n\n            if (dataSchema && dataSchema.Key) {\n                dataSchemaMap.set(dataSchema.Key, {...dataSchema,parent});\n            }\n            if (dataSchema &&  dataSchema.Structure) {\n                dataSchema.Structure.forEach((child) => {\n                    traverseDataSchema(child,dataSchema);\n                });\n            }\n    }\n    traverseDataSchema(dataSchema,null);\n    // traverse the nested record object to key-value pairs\n    const dataMap = new Map<string, any>();\n    const traverseData = (data: any) => {\n        if (data) {\n            Object.keys(data).forEach((key) => {\n                if (typeof data[key] === 'object') {\n                    traverseData(data[key]);\n                } else {\n                    dataMap.set(key, data[key]);\n                }\n            });\n        }\n    }\n\n    traverseData(data);\n\n    console.log(dataSchemaMap,dataMap,uiSchema)\n\n    // combine the dataSchema/ uiSchema / data to generate menuData\n    const  menuData = []\n    uiSchema.forEach((ui) => {\n        const key = ui.key;\n        const type = ui.type;\n        const dataSchema = dataSchemaMap.get(key);\n        const data = dataMap.get(key);\n        let item = {}\n        if (dataSchema ) {\n            item = {\n                ...ui,\n                dataSchema: dataSchema,\n                defaultValue: data\n            }\n            menuData.push(item)\n        }\n        \n    });\n    console.log('outPutMenuData',menuData);\n    return menuData;\n}\n\nexport function findParentKeys(MenuDataSchema) {\n    let parentKeys = [];\n    let parent = MenuDataSchema?.dataSchema?.parent;\n    \n    while (parent) {\n        parentKeys.push(parent.Key);\n        parent = parent?.dataSchema?.parent;\n    }\n    parentKeys.push(MenuDataSchema.key)\n    return parentKeys;\n}"]}