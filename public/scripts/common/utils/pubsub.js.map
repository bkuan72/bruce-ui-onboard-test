{"version":3,"sources":["scripts/common/utils/pubsub.ts"],"names":[],"mappings":";;;IAKA;QAEI;YACE,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACnB,CAAC;QAED,6BAAY,GAAZ,UAAc,SAAS,EAAE,IAAI;YAA7B,iBAmBC;YAlBC,OAAO;gBACL,SAAS,EAAE;oBACT,IAAI,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;wBAC1B,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClC,OAAO,CAAC,GAAG,CAAI,IAAI,CAAC,IAAI,2BAAsB,SAAS,YAAS,CAAC,CAAA;qBAClE;yBAAM;wBACL,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAChC,OAAO,CAAC,GAAG,CAAI,IAAI,CAAC,IAAI,2BAAsB,SAAS,YAAS,CAAC,CAAA;qBAClE;gBACH,CAAC;gBAED,WAAW,EAAE;oBACX,IAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAC;wBACxB,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,KAAK,IAAI,EAAnB,CAAmB,CAAC,CAAC;wBAC5F,OAAO,CAAC,GAAG,CAAI,IAAI,CAAC,IAAI,+BAA0B,SAAS,YAAS,CAAC,CAAA;qBACtE;gBACH,CAAC;aACF,CAAA;QACH,CAAC;QAGD,wBAAO,GAAP,UAAQ,SAAS;YAAE,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,6BAAO;;YACxB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACrC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACxB,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;oBACjB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC;aACJ;QACH,CAAC;QACH,aAAC;IAAD,CApCF,AAoCG,IAAA;IAED,kBAAe,IAAI,MAAM,EAAE,CAAC;;AAC9B,+BAA+B;AAC/B,oCAAoC;AACpC,OAAO;AAEP,oCAAoC;AACpC,6CAA6C;AAC7C,OAAO;AAEP,iCAAiC;AAGjC,yGAAyG;AAEzG,uGAAuG;AACvG,mHAAmH;AAInH,4HAA4H;AAE5H,iFAAiF","file":"pubsub.js","sourcesContent":["// subscription and publish event,enable data transfer between different components\ninterface Events {\n    [key: string]: Function[];\n}\n\nclass Pubsub {\n    private events: Events;\n    constructor() {\n      this.events = {};\n    }\n  \n    subscription (eventName, func) {\n      return {\n        subscribe: () => {\n          if (this.events[eventName]) {\n            this.events[eventName].push(func);\n            console.log(`${func.name} has subscribed to ${eventName} Topic!`)\n          } else {\n            this.events[eventName] = [func];\n            console.log(`${func.name} has subscribed to ${eventName} Topic!`)\n          }\n        },\n  \n        unsubscribe: () => {\n          if(this.events[eventName]){\n            this.events[eventName] = this.events[eventName].filter((subscriber) => subscriber !== func);\n            console.log(`${func.name} has unsubscribed from ${eventName} Topic!`)\n          }\n        }\n      }\n    } \n  \n  \n    publish(eventName, ...args) {\n      const funcs = this.events[eventName];\n      if (Array.isArray(funcs)) {\n        funcs.forEach((func) => {\n          func.apply(null, args);\n        });\n      }\n    }\n  }\n  \n  export default new Pubsub();\n//   const speak = (param) => {\n//     console.log(`I am ${param}`);\n//   };\n  \n//   const greetAll = (x, y, z) => {\n//     console.log(`Hello ${x}, ${y}, ${z}`);\n//   };\n  \n//   const pubsub = new Pubsub();\n  \n  \n//   pubsub.subscription(\"greet\", greetAll).subscribe() // prints greetAll has subscribed to greet Topic!\n  \n//   pubsub.subscription(\"sayName\", speak).subscribe() // prints speak has subscribed to sayName Topic!\n//   pubsub.subscription(\"sayName\", greetAll).unsubscribe() // prints greetAll has unsubscribed from sayName Topic!\n  \n  \n  \n//   pubsub.publish(\"greet\", \"Lawrence Eagles\", \"John Doe\", \"Jane Doe\"); // prints Hello Lawrence Eagles, John Doe, Jane Doe\n  \n//   pubsub.publish(\"sayName\", \"Lawrence Eagles\"); // prints I am Lawrence Eagles"]}