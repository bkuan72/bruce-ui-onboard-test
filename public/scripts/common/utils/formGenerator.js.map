{"version":3,"sources":["scripts/common/utils/formGenerator.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,SAAS;AACT,sCAAsC;AACtC,qCAAqC;AACrC,4CAA4C;AAC5C,6CAA6C;AAC7C,6CAA6C;AAC7C,+CAA+C;AAC/C,yCAAyC;AACzC,kDAAkD;AAClD,EAAE;AACF,WAAW;;;;;IAEX,mBAAmB;IACnB,sBAAsB;IACtB,oBAAoB;IACpB,kBAAkB;IAClB,8BAA8B;IAC9B,6BAA6B;IAC7B,oCAAoC;IACpC,aAAa;IACb,kBAAkB;IAClB,+BAA+B;IAC/B,8BAA8B;IAC9B,6BAA6B;IAC7B,aAAa;IACb,sBAAsB;IACtB,+BAA+B;IAC/B,iCAAiC;IACjC,yBAAyB;IACzB,YAAY;IACZ,QAAQ;IACR,KAAK;IAEL,qBAAqB;IACrB,cAAc;IACd,kCAAkC;IAClC,SAAS;IACT,cAAc;IACd,kCAAkC;IAClC,SAAS;IACT,kBAAkB;IAClB,gCAAgC;IAChC,QAAQ;IACR,KAAK;IAEL,6DAA6D;IAC7D,6CAA6C;IAC7C,gDAAgD;IAChD,4CAA4C;IAC5C,4EAA4E;IAC5E,yBAAyB;IACzB,2BAA2B;IAC3B,EAAE;IAGF;QAMI,yCAAyC;QACzC,gCAAgC;QAEhC,uBAAY,UAAe,EAAE,YAAiB;YAC1C,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,0CAA0C;YAC1C,IAAM,aAAa,GAAG,IAAI,GAAG,EAAe,CAAC;YAC7C,uCAAuC;YACvC,IAAM,kBAAkB,GAAG,UAAC,UAAe;gBACnC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,IAAM,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAG,IAAI,CAAC,GAAG,EAAE;wBACT,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;qBACrC;oBACD,IAAG,IAAI,CAAC,SAAS,EAAE;wBACf,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBACtC;iBACJ;YACT,CAAC,CAAA;YACD,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAC3B,yCAAyC;YACzC,IAAM,gBAAgB,GAAG,EAAE,CAAA;YAC3B,KAAI,IAAI,GAAG,IAAI,YAAY,EAAE;gBACzB,IAAM,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;gBAC/B,IAAM,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC9C,IAAG,cAAc,EAAE;oBACf,IAAI,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC;oBAC9B,IAAI,CAAC,KAAK,GAAC;wBACP,OAAO,EAAC,EAAE;wBACV,KAAK,EAAC,cAAc,CAAC,YAAY;qBACpC,CAAA;oBACD,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;iBAChC;aACJ;YAED,IAAI,CAAC,SAAS,GAAG,EAAE,CAAA;YACnB,KAAI,IAAI,GAAG,IAAI,gBAAgB,EAAE;gBAC7B,IAAM,IAAI,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC7B;QAEL,CAAC;QAEM,oCAAY,GAAnB;YACI,OAAO,IAAI,CAAC,SAAS,CAAA;QACzB,CAAC;QAuBL,oBAAC;IAAD,CA5EA,AA4EC,IAAA;IA5EY,sCAAa","file":"formGenerator.js","sourcesContent":["// Combine UISchema and JSONSchema to generate a form\r\n// Usage:\r\n// 1. Create a JSONSchema and UISchema\r\n// 2. Create a FormGenerator instance\r\n// 3. Call generateForm() to generate a form\r\n// 4. Call getFormData() to get the form data\r\n// 5. Call setFormData() to set the form data\r\n// 6. Call validate() to validate the form data\r\n// 7. Call reset() to reset the form data\r\n// 8. Call dispose() to dispose the form generator\r\n//\r\n// Example:\r\n\r\n// const schema = {\r\n//     type: \"object\",\r\n//     properties: {\r\n//         name: {\r\n//             type: \"string\",\r\n//             title: \"Name\",\r\n//             default: \"A new task\"\r\n//         },\r\n//         done: {\r\n//             type: \"boolean\",\r\n//             title: \"Done?\",\r\n//             default: false\r\n//         },\r\n//         priority: {\r\n//             type: \"integer\",\r\n//             title: \"Priority\",\r\n//             default: 0\r\n//         }\r\n//     }\r\n// };\r\n\r\n// const uiSchema = {\r\n//     name: {\r\n//         \"ui:widget\": \"textarea\"\r\n//     },\r\n//     done: {\r\n//         \"ui:widget\": \"checkbox\"\r\n//     },\r\n//     priority: {\r\n//         \"ui:widget\": \"updown\"\r\n//     }\r\n// };\r\n\r\n// const formGenerator = new FormGenerator(schema, uiSchema);\r\n// const form = formGenerator.generateForm();\r\n// const formData = formGenerator.getFormData();\r\n// const isValid = formGenerator.validate();\r\n// formGenerator.setFormData({ name: \"New task\", done: true, priority: 1 });\r\n// formGenerator.reset();\r\n// formGenerator.dispose();\r\n//\r\n\r\n\r\nexport class FormGenerator {\r\n    private _form: HTMLFormElement;\r\n    private _formElement: HTMLElement;\r\n    private _formSchema: any;\r\n    private _formUISchema: any;\r\n    private _formData: any;\r\n    // private _formValidator: FormValidator;\r\n    // private _formGenerator: Form;\r\n\r\n    constructor(formSchema: any, formUISchema: any) {\r\n        this._formSchema = formSchema;\r\n        this._formUISchema = formUISchema;\r\n        // translate formSchema to key-value pairs\r\n        const formSchemaMap = new Map<string, any>();\r\n        // traverse the nested formSchema array\r\n        const traverseFormSchema = (formSchema: any) => {\r\n                for(let i = 0; i < formSchema.length; i++) {\r\n                    const item = formSchema[i];\r\n                    if(item.Key) {\r\n                        formSchemaMap.set(item.Key, item);\r\n                    }\r\n                    if(item.Structure) {\r\n                        traverseFormSchema(item.Structure);\r\n                    }\r\n                }\r\n        }\r\n        traverseFormSchema(formSchema);\r\n        console.log(formSchemaMap);\r\n        // combine the formSchemaMap and uiSchema\r\n        const uiSchemaWithType = {}\r\n        for(let key in formUISchema) {\r\n            const item = formUISchema[key];\r\n            const formSchemaItem = formSchemaMap.get(key);\r\n            if(formSchemaItem) {\r\n                item[\"type\"] = formSchemaItem;\r\n                item.value={\r\n                    options:[],\r\n                    value:formSchemaItem.DefaultValue\r\n                }\r\n                uiSchemaWithType[key] = item;\r\n            }\r\n        }\r\n\r\n        this._formData = []\r\n        for(let key in uiSchemaWithType) {\r\n            const item = uiSchemaWithType[key];\r\n            this._formData.push(item);\r\n        }\r\n        \r\n    }\r\n\r\n    public generateForm(): any {\r\n        return this._formData\r\n    }\r\n\r\n    // public getFormData(): any {\r\n    //     const formData = this._formGenerator.formData;\r\n    //     return formData;\r\n    // }\r\n\r\n    // public setFormData(formData: any): void {\r\n    //     this._formGenerator.formData = formData;\r\n    // }\r\n\r\n    // public validate(): boolean {\r\n    //     const isValid = this._formValidator.validate(this._form);\r\n    //     return isValid;\r\n    // }\r\n\r\n    // public reset(): void {\r\n    //     this._form.reset();\r\n    // }\r\n\r\n    // public dispose(): void {\r\n    //     this._formElement.remove();\r\n    // }\r\n}\r\n"]}