{"version":3,"sources":["scripts/test/test-tooltip/app-test-tooltip.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAuBA;QAAiC,+BAAkC;QAG/D,qBAAmB,MAAuB;;YAA1C,YACI,kBAAM,MAAM,CAAC,SAqBhB;YAxBO,WAAK,GAAG,EAAE,CAAC,UAAU,EAAe,CAAC;YACrC,oBAAc,GAAG,EAAE,CAAC,eAAe,CAAiB,EAAE,CAAC,CAAC;YAGrD,IAAA,QAAQ,GAAI,MAAM,SAAV,CAAW;YAC1B,IAAM,IAAI,GAAG,kBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,IAAI,IAAI,IAAI,EAAE;gBAEd,IAAM,UAAU,SAAwB,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,0CAAE,UAAU,CAAC;gBAE/D,IAAI,QAAQ,GAAG,oCAAgB,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,CAAC,CAAC;gBAEpE,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAC9B,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACpB;YACD,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,UAAC,IAAI;;gBAC3C,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC1B,IAAM,UAAU,SAAwB,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,0CAAE,UAAU,CAAC;gBAC/D,IAAI,QAAQ,GAAG,oCAAgB,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,CAAC,CAAC;gBACpE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAClC,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAC9B,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,CAAC;;QAER,CAAC;QACO,gCAAU,GAAlB;YACI,gBAAM,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YACtC,gBAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QAC5C,CAAC;QA7BQ,WAAW;YADvB,qBAAS,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;WAC3C,WAAW,CA+BvB;QAAD,kBAAC;KA/BD,AA+BC,CA/BgC,6BAAiB,GA+BjD;IA/BY,kCAAW","file":"app-test-tooltip.js","sourcesContent":["import * as html from \"./app-test-tooltip.html\";\nimport \"./app-test-tooltip.css\";\nimport { IAbstractComponentParams, Component, AbstractComponent } from \"../../common/decorator/component\";\nimport { BruceInfo,IEntityTypeAttribute,  EntityType } from \"bruce-maps-widget\";\nimport {generateMenuData,MenuDataSchema} from \"../../common/utils/MenuDataGenerator\";\nimport pubsub from \"../../common/utils/pubsub\";\nimport {UISchema} from \"../../common/data/schema\";\nimport {KoUtils} from \"../../common/utils/ko-utils\";\ninterface IEntityData\n{\n    record: BruceInfo;\n    type: EntityType;\n    photoUrl: string;\n    name: string;\n}\n// component design to show the menu for important information\ninterface ITestMenuParams extends IAbstractComponentParams {\n    value:KnockoutObservable<IEntityData>;\n    uiSchema:UISchema[];\n}\n\n\n@Component({ name: \"app-test-tooltip\", template: html })\nexport class AppTestMenu extends AbstractComponent<ITestMenuParams> {\n    private value = ko.observable<IEntityData>();\n    private MenuDataSchema = ko.observableArray<MenuDataSchema>([]);\n    public constructor(params: ITestMenuParams) {\n        super(params);\n        const {uiSchema} = params;\n        const data = KoUtils.GetValue(params.value);\n        if (data != null) {\n           \n            const dataSchema:IEntityTypeAttribute = data?.type?.DataSchema;\n    \n            let menuData = generateMenuData(dataSchema, uiSchema, data?.record);\n     \n            this.MenuDataSchema(menuData);\n            this.value(data);\n        }\n        this.addDisposable(params.value.subscribe((data) => {\n            console.log('data', data);\n            const dataSchema:IEntityTypeAttribute = data?.type?.DataSchema;\n            let menuData = generateMenuData(dataSchema, uiSchema, data?.record);\n            console.log('menuData', menuData);\n            this.MenuDataSchema(menuData);\n            this.value(data);\n        }));\n        \n    }\n    private openDialog(): void {\n        pubsub.publish(\"DialogVisible\", true);\n        pubsub.publish(\"TooltipVisible\", false);\n    }\n    \n}"]}