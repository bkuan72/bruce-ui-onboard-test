{"version":3,"sources":["scripts/test/test-form/app-test-form.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAoBA;QAAiC,+BAAkC;QAI/D,qBAAY,MAAuB;YAAnC,YACI,kBAAM,MAAM,CAAC,SAgBhB;YApBM,WAAK,GAAG,EAAE,CAAC,UAAU,EAAe,CAAC;YAEpC,iBAAW,GAAG,EAAE,CAAC,UAAU,CAAS,EAAE,CAAC,CAAC;YAG5C,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAChC,IAAM,IAAI,GAAG,kBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE5C,IAAI,IAAI,IAAI,IAAI,EAAE;gBACd,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aAEpB;YACD,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,UAAC,IAAI;gBAC3C,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,CAAC;YACJ,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,IAAI;gBAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;gBACjB,iCAAiC;YACrC,CAAC,CAAC,CAAC,CAAC;;QAER,CAAC;QAEO,gCAAU,GAAlB,UAAmB,CAAC;YAChB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACd,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAA;YAClC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAA;QAChD,CAAC;QAEO,kCAAY,GAApB,UAAqB,CAAC;YAClB,gBAAM,CAAC,OAAO,CAAC,eAAe,EAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;QA/BQ,WAAW;YADvB,qBAAS,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;WACxC,WAAW,CAgCvB;QAAD,kBAAC;KAhCD,AAgCC,CAhCgC,6BAAiB,GAgCjD;IAhCY,kCAAW","file":"app-test-form.js","sourcesContent":["import * as html from \"./app-test-form.html\";\nimport \"./app-test-form.css\";\nimport { IAbstractComponentParams, Component, AbstractComponent } from \"../../common/decorator/component\";\nimport { BruceInfo,EntityType } from \"bruce-maps-widget\";\nimport {UISchema} from \"../../common/data/schema\";\nimport {KoUtils} from \"../../common/utils/ko-utils\";\nimport pubsub from \"../../common/utils/pubsub\";\ninterface IEntityData\n{\n    record: BruceInfo;\n    type: EntityType;\n    photoUrl: string;\n    name: string;\n}\n\ninterface ITestFormParams extends IAbstractComponentParams {\n    value:KnockoutObservable<IEntityData>;\n    uiSchema:UISchema[];\n}\n@Component({ name: \"app-test-form\", template: html })\nexport class AppTestForm extends AbstractComponent<ITestFormParams> {\n    public value = ko.observable<IEntityData>();\n    public uiSchema\n    private searchInput = ko.observable<string>('');\n    constructor(params: ITestFormParams) {\n        super(params);\n        this.uiSchema = params.uiSchema;\n        const data = KoUtils.GetValue(params.value);\n\n        if (data != null) {\n            this.value(data);\n            \n        }\n        this.addDisposable(params.value.subscribe((data) => {\n            this.value(data);\n        }));  \n        this.addDisposable(this.searchInput.subscribe((data) => {\n            console.log(data)\n            // pubsub.publish('search',data);\n        }));\n       \n    }\n\n    private submitForm(e){\n        console.log(e)\n        console.log($(e).serializeArray())\n        alert(JSON.stringify($(e).serializeArray()))\n    }\n\n    private handleCancel(e){\n        pubsub.publish(\"DialogVisible\",false);\n    }\n}\n\n\n"]}